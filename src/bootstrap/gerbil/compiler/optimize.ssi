prelude: :gerbil/core
package: gerbil/compiler
namespace: gxc

(%#begin (%#import
          :gerbil/expander
          :gerbil/compiler/base
          :gerbil/compiler/compile
          (in: :gerbil/core <syntax-case>)
          (in: :gerbil/core <syntax-sugar>)
          (spec:
           (:gerbil/gambit/exceptions)
           (0 display-exception 0 display-exception)))
         (%#export #t)
         (%#define-runtime
          current-compile-optimizer-info
          gxc#current-compile-optimizer-info)
         (%#define-runtime
          current-compile-mutators
          gxc#current-compile-mutators)
         (%#define-runtime
          current-compile-local-type
          gxc#current-compile-local-type)
         (%#define-runtime optimizer-info::t gxc#optimizer-info::t)
         (%#define-runtime optimizer-info? gxc#optimizer-info?)
         (%#define-runtime make-optimizer-info gxc#make-optimizer-info)
         (%#define-runtime optimizer-info-type gxc#optimizer-info-type)
         (%#define-runtime optimizer-info-ssxi gxc#optimizer-info-ssxi)
         (%#define-runtime
          optimizer-info-type-set!
          gxc#optimizer-info-type-set!)
         (%#define-runtime
          optimizer-info-ssxi-set!
          gxc#optimizer-info-ssxi-set!)
         (%#begin (%#begin-syntax
                   (%#call (%#ref _gx#load-module)
                           (%#quote "gerbil/compiler/optimize__1")))
                  (%#define-syntax optimizer-info |gxc[:0:]#optimizer-info|))
         (%#define-runtime optimizer-info:::init! gxc#optimizer-info:::init!)
         (%#define-runtime optimizer-info-init! gxc#optimizer-info-init!)
         (%#define-runtime optimize! gxc#optimize!)
         (%#define-runtime
          optimizer-load-ssxi-deps
          gxc#optimizer-load-ssxi-deps)
         (%#define-runtime optimizer-load-ssxi gxc#optimizer-load-ssxi)
         (%#define-runtime optimizer-import-ssxi gxc#optimizer-import-ssxi)
         (%#define-runtime !type::t gxc#!type::t)
         (%#define-runtime !type? gxc#!type?)
         (%#define-runtime make-!type gxc#make-!type)
         (%#define-runtime !type-id gxc#!type-id)
         (%#define-runtime !type-id-set! gxc#!type-id-set!)
         (%#define-syntax !type |gxc[:0:]#!type|)
         (%#define-runtime !alias::t gxc#!alias::t)
         (%#define-runtime !alias? gxc#!alias?)
         (%#define-runtime make-!alias gxc#make-!alias)
         (%#define-syntax !alias |gxc[:0:]#!alias|)
         (%#define-runtime !struct-type::t gxc#!struct-type::t)
         (%#define-runtime !struct-type? gxc#!struct-type?)
         (%#define-runtime make-!struct-type gxc#make-!struct-type)
         (%#define-runtime !struct-type-super gxc#!struct-type-super)
         (%#define-runtime !struct-type-fields gxc#!struct-type-fields)
         (%#define-runtime !struct-type-xfields gxc#!struct-type-xfields)
         (%#define-runtime !struct-type-ctor gxc#!struct-type-ctor)
         (%#define-runtime !struct-type-plist gxc#!struct-type-plist)
         (%#define-runtime !struct-type-methods gxc#!struct-type-methods)
         (%#define-runtime !struct-type-super-set! gxc#!struct-type-super-set!)
         (%#define-runtime
          !struct-type-fields-set!
          gxc#!struct-type-fields-set!)
         (%#define-runtime
          !struct-type-xfields-set!
          gxc#!struct-type-xfields-set!)
         (%#define-runtime !struct-type-ctor-set! gxc#!struct-type-ctor-set!)
         (%#define-runtime !struct-type-plist-set! gxc#!struct-type-plist-set!)
         (%#define-runtime
          !struct-type-methods-set!
          gxc#!struct-type-methods-set!)
         (%#define-syntax !struct-type |gxc[:0:]#!struct-type|)
         (%#define-runtime !procedure::t gxc#!procedure::t)
         (%#define-runtime !procedure? gxc#!procedure?)
         (%#define-runtime make-!procedure gxc#make-!procedure)
         (%#define-syntax !procedure |gxc[:0:]#!procedure|)
         (%#define-runtime !struct-pred::t gxc#!struct-pred::t)
         (%#define-runtime !struct-pred? gxc#!struct-pred?)
         (%#define-runtime make-!struct-pred gxc#make-!struct-pred)
         (%#define-syntax !struct-pred |gxc[:0:]#!struct-pred|)
         (%#define-runtime !struct-cons::t gxc#!struct-cons::t)
         (%#define-runtime !struct-cons? gxc#!struct-cons?)
         (%#define-runtime make-!struct-cons gxc#make-!struct-cons)
         (%#define-syntax !struct-cons |gxc[:0:]#!struct-cons|)
         (%#define-runtime !struct-getf::t gxc#!struct-getf::t)
         (%#define-runtime !struct-getf? gxc#!struct-getf?)
         (%#define-runtime make-!struct-getf gxc#make-!struct-getf)
         (%#define-runtime !struct-getf-off gxc#!struct-getf-off)
         (%#define-runtime !struct-getf-unchecked? gxc#!struct-getf-unchecked?)
         (%#define-runtime !struct-getf-off-set! gxc#!struct-getf-off-set!)
         (%#define-runtime
          !struct-getf-unchecked?-set!
          gxc#!struct-getf-unchecked?-set!)
         (%#define-syntax !struct-getf |gxc[:0:]#!struct-getf|)
         (%#define-runtime !struct-setf::t gxc#!struct-setf::t)
         (%#define-runtime !struct-setf? gxc#!struct-setf?)
         (%#define-runtime make-!struct-setf gxc#make-!struct-setf)
         (%#define-runtime !struct-setf-off gxc#!struct-setf-off)
         (%#define-runtime !struct-setf-unchecked? gxc#!struct-setf-unchecked?)
         (%#define-runtime !struct-setf-off-set! gxc#!struct-setf-off-set!)
         (%#define-runtime
          !struct-setf-unchecked?-set!
          gxc#!struct-setf-unchecked?-set!)
         (%#define-syntax !struct-setf |gxc[:0:]#!struct-setf|)
         (%#define-runtime !lambda::t gxc#!lambda::t)
         (%#define-runtime !lambda? gxc#!lambda?)
         (%#define-runtime make-!lambda gxc#make-!lambda)
         (%#define-runtime !lambda-arity gxc#!lambda-arity)
         (%#define-runtime !lambda-dispatch gxc#!lambda-dispatch)
         (%#define-runtime !lambda-inline gxc#!lambda-inline)
         (%#define-runtime !lambda-inline-typedecl gxc#!lambda-inline-typedecl)
         (%#define-runtime !lambda-arity-set! gxc#!lambda-arity-set!)
         (%#define-runtime !lambda-dispatch-set! gxc#!lambda-dispatch-set!)
         (%#define-runtime !lambda-inline-set! gxc#!lambda-inline-set!)
         (%#define-runtime
          !lambda-inline-typedecl-set!
          gxc#!lambda-inline-typedecl-set!)
         (%#define-syntax !lambda |gxc[:0:]#!lambda|)
         (%#define-runtime !case-lambda::t gxc#!case-lambda::t)
         (%#define-runtime !case-lambda? gxc#!case-lambda?)
         (%#define-runtime make-!case-lambda gxc#make-!case-lambda)
         (%#define-runtime !case-lambda-clauses gxc#!case-lambda-clauses)
         (%#define-runtime
          !case-lambda-clauses-set!
          gxc#!case-lambda-clauses-set!)
         (%#define-syntax !case-lambda |gxc[:0:]#!case-lambda|)
         (%#define-runtime !kw-lambda::t gxc#!kw-lambda::t)
         (%#define-runtime !kw-lambda? gxc#!kw-lambda?)
         (%#define-runtime make-!kw-lambda gxc#make-!kw-lambda)
         (%#define-runtime !kw-lambda-table gxc#!kw-lambda-table)
         (%#define-runtime !kw-lambda-dispatch gxc#!kw-lambda-dispatch)
         (%#define-runtime !kw-lambda-table-set! gxc#!kw-lambda-table-set!)
         (%#define-runtime
          !kw-lambda-dispatch-set!
          gxc#!kw-lambda-dispatch-set!)
         (%#define-syntax !kw-lambda |gxc[:0:]#!kw-lambda|)
         (%#define-runtime !kw-lambda-primary::t gxc#!kw-lambda-primary::t)
         (%#define-runtime !kw-lambda-primary? gxc#!kw-lambda-primary?)
         (%#define-runtime make-!kw-lambda-primary gxc#make-!kw-lambda-primary)
         (%#define-runtime !kw-lambda-primary-keys gxc#!kw-lambda-primary-keys)
         (%#define-runtime !kw-lambda-primary-main gxc#!kw-lambda-primary-main)
         (%#define-runtime
          !kw-lambda-primary-keys-set!
          gxc#!kw-lambda-primary-keys-set!)
         (%#define-runtime
          !kw-lambda-primary-main-set!
          gxc#!kw-lambda-primary-main-set!)
         (%#define-syntax !kw-lambda-primary |gxc[:0:]#!kw-lambda-primary|)
         (%#define-runtime !struct-type:::init! gxc#!struct-type:::init!)
         (%#begin (%#define-runtime !lambda:::init!__% gxc#!lambda:::init!__%)
                  (%#begin (%#define-runtime
                            !lambda:::init!__0
                            gxc#!lambda:::init!__0)
                           (%#define-runtime
                            !lambda:::init!__1
                            gxc#!lambda:::init!__1)
                           (%#define-runtime
                            !lambda:::init!
                            gxc#!lambda:::init!)))
         (%#define-runtime !struct-type-vtab gxc#!struct-type-vtab)
         (%#define-runtime
          !struct-type-lookup-method
          gxc#!struct-type-lookup-method)
         (%#begin (%#define-runtime
                   optimizer-declare-type!__%
                   gxc#optimizer-declare-type!__%)
                  (%#begin (%#define-runtime
                            optimizer-declare-type!__0
                            gxc#optimizer-declare-type!__0)
                           (%#define-runtime
                            optimizer-declare-type!
                            gxc#optimizer-declare-type!)))
         (%#begin (%#define-runtime
                   optimizer-declare-method!__%
                   gxc#optimizer-declare-method!__%)
                  (%#begin (%#define-runtime
                            optimizer-declare-method!__0
                            gxc#optimizer-declare-method!__0)
                           (%#define-runtime
                            optimizer-declare-method!
                            gxc#optimizer-declare-method!)))
         (%#define-runtime optimizer-lookup-type gxc#optimizer-lookup-type)
         (%#define-runtime optimizer-resolve-type gxc#optimizer-resolve-type)
         (%#define-runtime optimizer-lookup-method gxc#optimizer-lookup-method)
         (%#define-runtime optimize-source gxc#optimize-source)
         (%#define-runtime &identity-expression gxc#&identity-expression)
         (%#define-runtime &identity-special-form gxc#&identity-special-form)
         (%#define-runtime &identity gxc#&identity)
         (%#define-runtime &basic-xform-expression gxc#&basic-xform-expression)
         (%#define-runtime &basic-xform gxc#&basic-xform)
         (%#define-runtime &collect-mutators gxc#&collect-mutators)
         (%#define-runtime apply-collect-mutators gxc#apply-collect-mutators)
         (%#define-runtime &lift-top-lambdas gxc#&lift-top-lambdas)
         (%#define-runtime apply-lift-top-lambdas gxc#apply-lift-top-lambdas)
         (%#define-runtime &expression-subst gxc#&expression-subst)
         (%#define-runtime apply-expression-subst gxc#apply-expression-subst)
         (%#define-runtime &expression-subst* gxc#&expression-subst*)
         (%#define-runtime apply-expression-subst* gxc#apply-expression-subst*)
         (%#define-runtime &collect-type-info gxc#&collect-type-info)
         (%#define-runtime apply-collect-type-info gxc#apply-collect-type-info)
         (%#define-runtime &basic-expression-type gxc#&basic-expression-type)
         (%#define-runtime
          apply-basic-expression-type
          gxc#apply-basic-expression-type)
         (%#define-runtime &optimize-call gxc#&optimize-call)
         (%#define-runtime apply-optimize-call gxc#apply-optimize-call)
         (%#define-runtime &optmize-annotated gxc#&optmize-annotated)
         (%#define-runtime
          apply-optimize-annotated
          gxc#apply-optimize-annotated)
         (%#define-runtime &push-match-vars gxc#&push-match-vars)
         (%#define-runtime apply-push-match-vars gxc#apply-push-match-vars)
         (%#define-runtime &find-expression gxc#&find-expression)
         (%#define-runtime &find-var-refs gxc#&find-var-refs)
         (%#define-runtime apply-find-var-refs gxc#apply-find-var-refs)
         (%#define-runtime &collect-runtime-refs gxc#&collect-runtime-refs)
         (%#define-runtime
          apply-collect-runtime-refs
          gxc#apply-collect-runtime-refs)
         (%#define-runtime &generate-ssxi gxc#&generate-ssxi)
         (%#define-runtime apply-generate-ssxi gxc#apply-generate-ssxi)
         (%#define-runtime xform-identity gxc#xform-identity)
         (%#define-runtime xform-wrap-source gxc#xform-wrap-source)
         (%#define-runtime xform-apply-compile-e gxc#xform-apply-compile-e)
         (%#define-runtime xform-begin% gxc#xform-begin%)
         (%#define-runtime xform-module% gxc#xform-module%)
         (%#define-runtime xform-define-values% gxc#xform-define-values%)
         (%#define-runtime xform-begin-annotation% gxc#xform-begin-annotation%)
         (%#define-runtime xform-lambda% gxc#xform-lambda%)
         (%#define-runtime xform-case-lambda% gxc#xform-case-lambda%)
         (%#define-runtime xform-let-values% gxc#xform-let-values%)
         (%#define-runtime xform-operands gxc#xform-operands)
         (%#define-runtime xform-call% gxc#xform-call%)
         (%#define-runtime xform-setq% gxc#xform-setq%)
         (%#define-runtime collect-mutators-setq% gxc#collect-mutators-setq%)
         (%#define-runtime dispatch-lambda-form? gxc#dispatch-lambda-form?)
         (%#define-runtime
          dispatch-lambda-form-delegate
          gxc#dispatch-lambda-form-delegate)
         (%#define-runtime lambda-form-arity gxc#lambda-form-arity)
         (%#define-runtime lambda-expr? gxc#lambda-expr?)
         (%#define-runtime case-lambda-expr? gxc#case-lambda-expr?)
         (%#define-runtime opt-lambda-expr? gxc#opt-lambda-expr?)
         (%#define-runtime kw-lambda-expr? gxc#kw-lambda-expr?)
         (%#begin (%#define-runtime
                   lift-case-lambda-clauses__%
                   gxc#lift-case-lambda-clauses__%)
                  (%#begin (%#define-runtime
                            lift-case-lambda-clauses__0
                            gxc#lift-case-lambda-clauses__0)
                           (%#define-runtime
                            lift-case-lambda-clauses
                            gxc#lift-case-lambda-clauses)))
         (%#define-runtime
          lift-top-lambda-define-values%
          gxc#lift-top-lambda-define-values%)
         (%#define-runtime
          lift-top-lambda-let-values%
          gxc#lift-top-lambda-let-values%)
         (%#define-runtime
          lift-top-lambda-letrec-values%
          gxc#lift-top-lambda-letrec-values%)
         (%#define-runtime
          lift-top-lambda-binding?
          gxc#lift-top-lambda-binding?)
         (%#define-runtime expression-subst-ref% gxc#expression-subst-ref%)
         (%#define-runtime expression-subst*-ref% gxc#expression-subst*-ref%)
         (%#define-runtime expression-subst-setq% gxc#expression-subst-setq%)
         (%#define-runtime expression-subst*-setq% gxc#expression-subst*-setq%)
         (%#define-runtime
          collect-type-define-values%
          gxc#collect-type-define-values%)
         (%#define-runtime
          collect-type-let-values%
          gxc#collect-type-let-values%)
         (%#define-runtime collect-type-call% gxc#collect-type-call%)
         (%#define-runtime
          basic-expression-type-begin%
          gxc#basic-expression-type-begin%)
         (%#define-runtime
          basic-expression-type-begin-annotation%
          gxc#basic-expression-type-begin-annotation%)
         (%#define-runtime
          basic-expression-type-lambda%
          gxc#basic-expression-type-lambda%)
         (%#define-runtime
          basic-expression-type-case-lambda%
          gxc#basic-expression-type-case-lambda%)
         (%#define-runtime
          basic-expression-type-builtin
          gxc#basic-expression-type-builtin)
         (%#define-syntax
          defbasic-expression-type-builtin
          |gxc[:0:]#defbasic-expression-type-builtin|)
         (%#define-runtime
          basic-expression-type-call%
          gxc#basic-expression-type-call%)
         (%#define-runtime
          basic-expression-type-make-struct-type
          gxc#basic-expression-type-make-struct-type)
         (%#define-runtime
          basic-expression-type-make-struct-predicate
          gxc#basic-expression-type-make-struct-predicate)
         (%#begin (%#define-runtime
                   basic-expression-type-make-struct-field-accessor__%
                   gxc#basic-expression-type-make-struct-field-accessor__%)
                  (%#begin (%#define-runtime
                            basic-expression-type-make-struct-field-accessor__0
                            gxc#basic-expression-type-make-struct-field-accessor__0)
                           (%#define-runtime
                            basic-expression-type-make-struct-field-accessor
                            gxc#basic-expression-type-make-struct-field-accessor)))
         (%#begin (%#define-runtime
                   basic-expression-type-make-struct-field-mutator__%
                   gxc#basic-expression-type-make-struct-field-mutator__%)
                  (%#begin (%#define-runtime
                            basic-expression-type-make-struct-field-mutator__0
                            gxc#basic-expression-type-make-struct-field-mutator__0)
                           (%#define-runtime
                            basic-expression-type-make-struct-field-mutator
                            gxc#basic-expression-type-make-struct-field-mutator)))
         (%#define-runtime
          basic-expression-type-make-struct-field-unchecked-accessor
          gxc#basic-expression-type-make-struct-field-unchecked-accessor)
         (%#define-runtime
          basic-expression-type-make-struct-field-unchecked-mutator
          gxc#basic-expression-type-make-struct-field-unchecked-mutator)
         (%#define-runtime
          basic-expression-type-ref%
          gxc#basic-expression-type-ref%)
         (%#define-runtime optimize-call% gxc#optimize-call%)
         (%#define-runtime
          !struct-pred::optimize-call
          gxc#!struct-pred::optimize-call)
         (%#define-runtime
          !struct-cons::optimize-call
          gxc#!struct-cons::optimize-call)
         (%#define-runtime
          !struct-getf::optimize-call
          gxc#!struct-getf::optimize-call)
         (%#define-runtime
          !struct-setf::optimize-call
          gxc#!struct-setf::optimize-call)
         (%#define-runtime !lambda::optimize-call gxc#!lambda::optimize-call)
         (%#define-runtime
          !case-lambda::optimize-call
          gxc#!case-lambda::optimize-call)
         (%#define-runtime !lambda-arity-match? gxc#!lambda-arity-match?)
         (%#define-runtime
          !kw-lambda::optimize-call
          gxc#!kw-lambda::optimize-call)
         (%#define-runtime !kw-lambda-split-args gxc#!kw-lambda-split-args)
         (%#define-runtime
          !kw-lambda-primary::optimize-call
          gxc#!kw-lambda-primary::optimize-call)
         (%#define-runtime optimize-annotation% gxc#optimize-annotation%)
         (%#define-runtime optimize-match gxc#optimize-match)
         (%#define-runtime optimize-match-body gxc#optimize-match-body)
         (%#define-runtime
          optimize-match-basic-blocks
          gxc#optimize-match-basic-blocks)
         (%#define-runtime
          optimize-match-lift-basic-blocks
          gxc#optimize-match-lift-basic-blocks)
         (%#define-runtime
          optimize-match-fold-basic-blocks
          gxc#optimize-match-fold-basic-blocks)
         (%#define-runtime optimize-match-block gxc#optimize-match-block)
         (%#define-runtime
          optimize-match-prune-blocks
          gxc#optimize-match-prune-blocks)
         (%#define-runtime
          collect-runtime-refs-ref%
          gxc#collect-runtime-refs-ref%)
         (%#define-runtime
          collect-runtime-refs-setq%
          gxc#collect-runtime-refs-setq%)
         (%#define-runtime
          push-match-vars-let-values%
          gxc#push-match-vars-let-values%)
         (%#define-runtime push-match-vars-if% gxc#push-match-vars-if%)
         (%#define-runtime push-match-vars-call% gxc#push-match-vars-call%)
         (%#define-runtime push-match-vars-stop gxc#push-match-vars-stop)
         (%#define-runtime find-body% gxc#find-body%)
         (%#define-runtime find-begin-annotation% gxc#find-begin-annotation%)
         (%#define-runtime find-lambda% gxc#find-lambda%)
         (%#define-runtime find-case-lambda% gxc#find-case-lambda%)
         (%#define-runtime find-let-values% gxc#find-let-values%)
         (%#define-runtime find-setq% gxc#find-setq%)
         (%#define-runtime find-var-refs-ref% gxc#find-var-refs-ref%)
         (%#define-runtime find-var-refs-setq% gxc#find-var-refs-setq%)
         (%#define-runtime generate-ssxi-module% gxc#generate-ssxi-module%)
         (%#define-runtime
          generate-ssxi-define-values%
          gxc#generate-ssxi-define-values%)
         (%#define-runtime generate-ssxi-call% gxc#generate-ssxi-call%)
         (%#define-runtime !alias::typedecl gxc#!alias::typedecl)
         (%#define-runtime !struct-type::typedecl gxc#!struct-type::typedecl)
         (%#define-runtime !struct-pred::typedecl gxc#!struct-pred::typedecl)
         (%#define-runtime !struct-cons::typedecl gxc#!struct-cons::typedecl)
         (%#define-runtime !struct-getf::typedecl gxc#!struct-getf::typedecl)
         (%#define-runtime !struct-setf::typedecl gxc#!struct-setf::typedecl)
         (%#define-runtime !lambda::typedecl gxc#!lambda::typedecl)
         (%#define-runtime !case-lambda::typedecl gxc#!case-lambda::typedecl)
         (%#define-runtime !kw-lambda::typedecl gxc#!kw-lambda::typedecl)
         (%#define-runtime
          !kw-lambda-primary::typedecl
          gxc#!kw-lambda-primary::typedecl)
         (%#define-runtime identifier-symbol gxc#identifier-symbol))
(%#call (%#ref _gx#load-module) (%#quote "gerbil/compiler/optimize__0"))
